    useEffect(() => {
        const timer = setTimeout(() => {
            setErr("");
        }, 1500);
        return () => clearTimeout(timer);
    }, [err]);


    useEffect(() => {
        SetTurn();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [data]);

    const handleChange = (mode) => {
        props.setPlayMode(mode);
        props.setPlayModeChangeShow(false);
        console.log("モードを変更しました。", mode)
    }

    let End = false;
    const ValidationCheck = () => {
        End = false;
        if (!value) {
            End = true;
            setErr("コードを入力してください");
        } else if (!/^[a-zA-Z0-9]*$/.test(value)) {
            End = true;
            setErr("半角英数字で入力してください");
        } else if (value.length < 8) {
            End = true;
            setErr("コードは8文字以上で入力してください");
        } else {
            setErr("");
        }
    }

    const SET = () => {
        props.setIsConnect(true);
        props.setRoomPass(value);
        props.setConnectModalShow(false);
    }

    const SetTurn = async () => {
        const DocRef = doc(db, "ox-game", value);
        try {
            if (!data.X) {
                await updateDoc(DocRef, {
                    X: true,
                });
                props.setOnlineTurn("X");
            } else if (!data.O) {
                await updateDoc(DocRef, {
                    O: true,
                });
                props.setOnlineTurn("O");
            } else {
                setErr("定員に達しています。");
            }
        } catch {
            setErr("不明なエラーが発生しました。");
        }
    }

    const handleConnect = async () => {
        ValidationCheck();
        if (End) return;
        setData("");

        fetchData();

        SET();
    }

    const handleNewCreate = async () => {
        ValidationCheck();
        if (End) return;
        setData("");

        const DocRef = doc(db, "ox-game", value);
        const DocSnapshot = await getDoc(DocRef);

        if (DocSnapshot.exists()) {
            setErr("すでに存在します");
            return;
        }

        const startPlayer = Math.floor(Math.random() * 2) === 0 ? "X" : "O";
        try {
            await setDoc(doc(db, "ox-game", value), {
                squares: Array(9).fill(null),
                startPlayer: startPlayer,
                turn: startPlayer,
                winner: null,
                date: new Date().toLocaleString(),
                X: false,
                O: false,
            });
            props.setConnectModalShow(false);
        } catch {
            setErr("作成できませんでした");
            return;
        }

        fetchData();

        SET();
    }

    const fetchData = async () => {
        try {
            const DocRef = doc(db, "ox-game", value);
            const DocSnapshot = await getDoc(DocRef);

            if (DocSnapshot.exists()) {
                const data = DocSnapshot.data();
                setData(data);
                return "success";
            } else {
                setErr("部屋が存在しません");
                return "error_not_found";
            }
        } catch {
            setErr("取得できませんでした");
            return "error";
        }
    };
